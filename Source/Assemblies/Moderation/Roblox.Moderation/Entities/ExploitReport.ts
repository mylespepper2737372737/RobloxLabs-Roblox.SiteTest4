/* Legacy Entity to be used with PartialDataBase until the entityHelper is set up. */

import { EntityBase } from '../../../Mssql/Roblox.Mssql.PartialDatabase/Base/EntityBase';
import { PartialDatabaseConditionType } from '../../../Mssql/Roblox.Mssql.PartialDatabase/Enumeration/PartialDatabaseConditionType';
import { FASTLOGS, FLog, LOGVARIABLE } from '../../../Web/Util/Roblox.Web.Util/Logging/FastLog';
import { IExploitReport } from './IExploitReport';

LOGVARIABLE('Moderation', 7);

export class ExploitReport extends EntityBase implements IExploitReport {
	Created: string;
	Updated: string;
	ID: number;
	IndexID: number;
	PlayerID: number;
	Stats_RCount: number;
	Stats_ECount: number;

	protected static dataBaseName = 'RobloxModeration';

	public static async GetReportsByIndexID(indexID: long) {
		if (!this.isConnected) await this.connectIfNotConnected();
		const [, , reports] = this.dataBase.GetTable<IExploitReport>('ExploitReport', 'Id', true);

		const [success, errMsg, data] = await reports.SelectKeysWhere(['ID', 'PlayerID', 'Stats_ECount', 'Stats_RCount'], {
			Key: 'IndexID',
			Value: indexID,
			Condition: PartialDatabaseConditionType.Equal,
		});

		if (!success) {
			FASTLOGS(FLog['Moderation'], `[FLog::Moderation] Failed to fetch report because: %s`, errMsg);
		}

		const reportData: IExploitReport[] = [];

		for (let i = 0; i < data.Rows.length; i++) {
			const report = new ExploitReport();

			report.IndexID = indexID;
			report.ID = <long>(<unknown>data.Rows[i].Data[0].Value);
			report.PlayerID = <long>(<unknown>data.Rows[i].Data[1].Value);
			report.Stats_ECount = <int>(<unknown>data.Rows[i].Data[2].Value);
			report.Stats_RCount = <int>(<unknown>data.Rows[i].Data[3].Value);
			report.Created = <string>(<unknown>data.Rows[i].Data[4].Value);
			report.Updated = <string>(<unknown>data.Rows[i].Data[5].Value);

			reportData.push(report);
		}

		return reportData;
	}
}
